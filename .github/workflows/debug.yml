name: Debug build

on:
  push:
    branches:
      - dev
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/debug.yml'
  pull_request:
    branches:
      - dev
  workflow_dispatch:
    inputs:
      artifacts:
        description: 'y, if need artifacts'
        required: false

jobs:
  ffmpeg:
    name: Native Build (FFmpeg)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
      - name: FFmpeg Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          sudo apt-get install yasm -y
          ./run init libs libvpx
          ./run init libs ffmpeg
  boringssl:
    name: Native Build (BoringSSL)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: BoringSSL Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          ./run init action boringssl
          ./run init libs boringssl
  native:
    name: Native Build (Telegram)
    runs-on: ubuntu-latest
    needs:
      - ffmpeg
      - boringssl
    strategy:
      matrix:
        flavor:
          - armeabi-v7a
          - arm64-v8a
          - x86
          - x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/libvpx > libvpx_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache
        id: cache
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-${{ matrix.flavor }}
      - name: Checkout Library
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git submodule update --init 'TMessagesProj/jni/*'
      - name: FFmpeg Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/ffmpeg/build
            TMessagesProj/jni/libvpx/build
          key: ${{ hashFiles('ffmpeg_status', 'libvpx_status', 'TMessagesProj/jni/*ffmpeg*.sh', 'TMessagesProj/jni/*libvpx*.sh', 'TMessagesProj/jni/patches/ffmpeg/*') }}
      - name: BoringSSL Cache
        uses: actions/cache@v2
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: |
            TMessagesProj/jni/boringssl/build
          key: ${{ hashFiles('boringssl_status') }}
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install NDK
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
      - name: Fix BoringSSL
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          cd TMessagesProj/jni
          ./patch_boringssl.sh
      - name: Native Build
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          export NATIVE_TARGET="${{ matrix.flavor }}"
          ./run libs native
  build:
    name: Gradle Build
    runs-on: ubuntu-latest
    needs:
      - native
    strategy:
      matrix:
        flavor:
          - MiniRelease
          - MiniReleaseNoGcm
          - FullRelease
          - FullReleaseNoGcm
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
      - name: Install NDK
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Native Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86
      - name: Native Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86_64
      - name: Configure Gradle
        run: |
          sed -i -e "s/16384/6144/g" gradle.properties
          echo "sdk.dir=${ANDROID_HOME}" >> local.properties
#          echo "ndk.dir=${ANDROID_HOME}/ndk-bundle" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Debug Build
        run: |
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          export DEBUG_BUILD=true
          ./gradlew TMessagesProj:assemble${{ matrix.flavor }}

          echo "APK_FILE=$(find TMessagesProj/build/outputs/apk -name '*arm64-v8a*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_ARMV7=$(find TMessagesProj/build/outputs/apk -name '*armeabi*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X86=$(find TMessagesProj/build/outputs/apk -name '*x86-*.apk')" >> $GITHUB_ENV
          echo "APK_FILE_X64=$(find TMessagesProj/build/outputs/apk -name '*x86_64*.apk')" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (arm64-v8a)
        with:
          name: NekoX-${{ matrix.flavor }}-arm64-v8a
          path: ${{ env.APK_FILE }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (armeabi-v7a)
        with:
          name: NekoX-${{ matrix.flavor }}-armeabi-v7a
          path: ${{ env.APK_FILE_ARMV7 }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (x86_64)
        with:
          name: NekoX-${{ matrix.flavor }}-x86_64
          path: ${{ env.APK_FILE_X64 }}
      - uses: actions/upload-artifact@v2
        if: github.event.inputs.artifacts == 'y'
        name: Upload apk (x86)
        with:
          name: NekoX-${{ matrix.flavor }}-x86
          path: ${{ env.APK_FILE_X86 }}

  build-dev:
    name: Gradle Build
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' && success() }}
    needs:
      - native
      - telegram-bot-api
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Android SDK Tools
        uses: android-actions/setup-android@v2
      - name: Install NDK
        run: |
          echo "y" | sudo ${ANDROID_HOME}/tools/bin/sdkmanager --install "ndk;21.4.7075529" --sdk_root=${ANDROID_SDK_ROOT} &> /dev/null
          echo "sdk.dir=${ANDROID_HOME}" > local.properties
          echo "ndk.dir=${ANDROID_HOME}/ndk/21.4.7075529" >> local.properties
      - name: Fetch Status
        run: |
          git submodule status TMessagesProj/jni/ffmpeg > ffmpeg_status
          git submodule status TMessagesProj/jni/boringssl > boringssl_status
      - name: Native Cache (armeabi-v7a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-armeabi-v7a
      - name: Native Cache (arm64-v8a)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-arm64-v8a
      - name: Native Cache (x86)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86
      - name: Native Cache (x86_64)
        uses: actions/cache@v2
        with:
          path: |
            TMessagesProj/src/main/libs
          key: ${{ hashFiles('TMessagesProj/jni/**', 'ffmpeg_status', 'boringssl_status') }}-x86_64
      - name: Build Cache
        uses: actions/cache@v3
        with:
          path: |
            TMessagesProj/build
            TMessagesProj/.cxx
            ss-rust/build
            ssr-rust/build
            openpgp-api/build
          key: build-cache
      - name: Configure Gradle
        run: |
          sed -i -e "s/16384/6144/g" gradle.properties
          echo "sdk.dir=${ANDROID_HOME}" >> local.properties
#          echo "ndk.dir=${ANDROID_HOME}/ndk-bundle" >> local.properties
      - name: Gradle cache
        uses: actions/cache@v2
        with:
          path: ~/.gradle
          key: gradle-${{ hashFiles('**/*.gradle') }}
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: CI Build
        run: |
          export LOCAL_PROPERTIES="${{ secrets.LOCAL_PROPERTIES }}"
          export DEBUG_BUILD=true
          export NATIVE_TARGET=universal
          ./gradlew TMessagesProj:assembleMiniRelease

          APK=$(find TMessagesProj/build/outputs/apk/mini/release -name 'NekoX*.apk')
          echo "APK=$APK" >> $GITHUB_ENV
          VERSION_CODE=$(grep -E "def verCode = ([0-9]+)" TMessagesProj/build.gradle | sed "s/def verCode = //")
          VERSION_NAME=$(grep -E "def verName = " TMessagesProj/build.gradle | sed "s/def verName = //" | sed "s/\"//g")
          echo "VERSION_CODE=$VERSION_CODE" >> $GITHUB_ENV
          echo "VERSION_NAME=VERSION_NAME" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v2
        with:
          name: ci-apk
          path: ${{ env.APK }}
  upload:
    name: Upload Apks to Telegram
    runs-on: ubuntu-latest
    needs:
      - build-dev
      - telegram-bot-api
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v2
        with:
          name: ci-apk
          path: apks
      - name: Download Telegram Bot API Binary
        uses: actions/download-artifact@master
        with:
          name: telegram-bot-api-binary
          path: .
      - name: Install Python Environment
        run: |
          sudo apt install python3 python3-pip -y
          pip3 install requests
      - name: Prepare Upload
        run: |
          chmod +x telegram-bot-api-binary
          function start() {
            ./telegram-bot-api-binary --api-id=21724 --api-hash=3e0cb5efcd52300aec5994fdfc5bdc16 -p 38118 --local 2>&1 > /dev/null &
            sleep 5
          }
          start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
          curl http://127.0.0.1:38118/ || start
      - name: Upload
        run: |
          curl https://raw.githubusercontent.com/NekoX-Dev/NekoX/dev/.github/scripts/upload.py -o upload.py
          
          export BOT_TOKEN="${{ secrets.HELPER_BOT_TOKEN }}"
          export BOT_TARGET="${{ secrets.HELPER_BOT_TARGET }}"
          export COMMIT_MESSAGE="${{ github.event.head_commit.message }}"

          python3 upload.py ci

          pkill telegram-bot

  telegram-bot-api:
    name: Telegram Bot API
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Clone Telegram Bot API
        run: |
          git clone --recursive https://github.com/tdlib/telegram-bot-api.git
          git status telegram-bot-api >> telegram-bot-api-status
      - name: Cache Bot API Binary
        id: cache-bot-api
        uses: actions/cache@v2
        with:
          path: telegram-bot-api-binary
          key: CI-telegram-bot-api-${{ hashFiles('telegram-bot-api-status') }}
      - name: Compile Telegram Bot API
        if: steps.cache-bot-api.outputs.cache-hit != 'true'
        run: |
          sudo apt-get update
          sudo apt-get install make git zlib1g-dev libssl-dev gperf cmake g++
          cd telegram-bot-api
          rm -rf build
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=.. ..
          cmake --build . --target install -j$(nproc)
          cd ../..
          ls -l telegram-bot-api/bin/telegram-bot-api*
          cp telegram-bot-api/bin/telegram-bot-api telegram-bot-api-binary
      - name: Upload Binary
        uses: actions/upload-artifact@master
        with:
          name: telegram-bot-api-binary
          path: telegram-bot-api-binary
